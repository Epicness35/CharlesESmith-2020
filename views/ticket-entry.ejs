<!DOCTYPE html>
<html>

<head>
   <meta name="viewport" content="width=device-width, initial-scale=1">
   <title>Student Event Sign Up</title>
   <!-- The core Firebase JS SDK is always required and must be listed first -->
   <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
      integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
   <script src="https://www.gstatic.com/firebasejs/4.13.0/firebase.js"></script>



   <script>
      // Your web app's Firebase configuration
      var firebaseConfig = {
         apiKey: "AIzaSyCCgoy1_bJzrruepLYIWBbrIUIGxM-p2CQ",
         authDomain: "signup-form-e4c78.firebaseapp.com",
         databaseURL: "https://signup-form-e4c78.firebaseio.com",
         projectId: "signup-form-e4c78",
         storageBucket: "signup-form-e4c78.appspot.com",
         messagingSenderId: "1000336889334",
         appId: "1:1000336889334:web:f5099e3a8ecc1584"
      };
      // Initialize Firebase
      firebase.initializeApp(firebaseConfig);
   </script>
   <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
   <script type="text/javascript">



      function delineate(str) {
         theleft = str.indexOf("=") + 1;
         theright = str.lastIndexOf("&");
         return (str.substring(theleft, theright));
      }
      $(document).ready(function () {
         const database = firebase.database();
         var locate = window.location
         document.joe.burns.value = locate

         var text = document.joe.burns.value
         var myvar = delineate(text);

         $("input[id='checkNum']").prop("disabled", true);
         $("input[id='checkNumG']").prop("disabled", true);
         document.getElementById("delGuest").style.display = "none";
         var ogHost; //Holds original ticket number of a pre-existing non-guest
         var ogGuest; //Holds original ticket number of a pre-exisiting guest

         database.ref("tickets").orderByChild("sID").equalTo(myvar).once("value", snapshot => {
            if (snapshot.exists()) { //ID exists in database
               var ref = firebase.database().ref('tickets');
               ref.orderByChild('sID').equalTo(myvar).on("value", function (snapshot) {
                  snapshot.forEach(function (child) {
                     const data = child;
                     if (!child.hasChild("host")){ //If user searched for a non-guest's ID
                        //Populate non-guest fields
                        $('input[id="ticketNum"]').val(data.key);
                        ogHost = data.key;
                        $('input[id="studentID"]').val(myvar);
                        $('input[id="firstName"]').val(data.child("first").val());
                        $('input[id="lastName"]').val(data.child("last").val());
                        $('input[id="midInit"]').val(data.child("middle").val());
                        $('input[id="grade"]').val(data.child("grade").val());
                        if (data.child("payment")) {
                           if (data.child("payment").val() === "cash") {
                              $('input[name=pay][value=cash]').prop('checked', 'checked');
                           } else if (data.child("payment").val() === "waiver") {
                              $('input[name=pay][value=waiver]').prop('checked', 'checked');
                           } else {
                              $('input[name=pay][value=check]').prop('checked', 'checked');
                              $('input[id="checkNum"]').val(data.child("payment").val());
                              $("input[id='checkNum']").prop("disabled", false);
                           }
                        }

                        if (data.child("guest") !== null) { //If guest exists, populate guest fields
                           ref.orderByChild('host').equalTo(data.key).on("value", function (snapshot) {
                              snapshot.forEach(function (child) {
                                 const guestRef = child;
                                 $('input[id="ticketNumG"]').val(guestRef.key);
                                 ogGuest = guestRef.key;
                                 $('input[id="studentIDG"]').val(guestRef.child("sID").val());
                                 $('input[id="firstNameG"]').val(guestRef.child("first").val());
                                 $('input[id="lastNameG"]').val(guestRef.child("last").val());
                                 if (guestRef.child("payment")) {
                                    if (guestRef.child("payment").val() === "cash") {
                                       $('input[name=payG][value=cash]').prop('checked', 'checked');
                                    } else if (guestRef.child("payment").val() === "waiver") {
                                       $('input[name=payG][value=waiver]').prop('checked', 'checked');
                                    } else {
                                       $('input[name=payG][value=check]').prop('checked', 'checked');
                                       $('input[id="checkNumG"]').val(guestRef.child("payment").val());
                                       $("input[id='checkNumG']").prop("disabled", false);
                                    }
                                 }
                                 toggle(false);
                              });
                           });
                        }
                     } else { //If user searched for a guest's ID
                        //Populate guest fields
                        $('input[id="ticketNumG"]').val(data.key);
                        ogGuest = data.key;
                        $('input[id="studentIDG"]').val(myvar);
                        $('input[id="firstNameG"]').val(data.child("first").val());
                        $('input[id="lastNameG"]').val(data.child("last").val());
                        if (data.child("payment")){
                           if (data.child("payment").val()==="cash"){
                              $('input[name=payG][value=cash]').prop('checked', 'checked');
                           } else if (data.child("payment").val()==="waiver"){
                              $('input[name=payG][value=waiver]').prop('checked', 'checked');
                           } else {
                              $('input[name=payG][value=check]').prop('checked', 'checked');
                              $('input[id="checkNumG"]').val(data.child("payment").val());
                              $("input[id='checkNumG']").prop("disabled",false);
                           }
                        }
                        toggle(false);
                        if (data.child("host") !== null ) { //true
                           //If host exists, populate host fields
                           ref.orderByChild('guest').equalTo(data.key).on("value", function(snapshot) {
                              snapshot.forEach(function(child) {
                                 const hostRef = child;
                                 $('input[id="ticketNum"]').val(hostRef.key);
                                 ogHost = hostRef.key;
                                 $('input[id="studentID"]').val(hostRef.child("sID").val());
                                 $('input[id="firstName"]').val(hostRef.child("first").val());
                                 $('input[id="lastName"]').val(hostRef.child("last").val());
                                 $('input[id="midInit"]').val(hostRef.child("middle").val());
                                 $('input[id="grade"]').val(hostRef.child("grade").val());
                                 if (hostRef.child("payment")){
                                    if (hostRef.child("payment").val()==="cash"){
                                       $('input[name=pay][value=cash]').prop('checked', 'checked');
                                    } else if (hostRef.child("payment").val()==="waiver"){
                                       $('input[name=pay][value=waiver]').prop('checked', 'checked');
                                    } else {
                                       $('input[name=pay][value=check]').prop('checked', 'checked');
                                       $('input[id="checkNum"]').val(hostRef.child("payment").val());
                                       $("input[id='checkNum']").prop("disabled",false);
                                    }
                                 }
                              });
                           });
                        }
                     }
                  });
               });
            } else { //ID does not exist in tickets database
               const key = 'students/' + myvar;
               database.ref(key).once('value', (snapshot) => {
                  const data = snapshot.val();
                  if (!data) {
                     alert("ID does not exist.");
                     return;
                  }
                  if (data.FIRST && data.MI && data.LAST && data.GR) {
                     $('input[id="studentID"]').val(myvar);
                     $('input[id="firstName"]').val(data.FIRST);
                     $('input[id="lastName"]').val(data.LAST);
                     $('input[id="midInit"]').val(data.MI);
                     $('input[id="grade"]').val(data.GR);

                  }
                  else if (data.FIRST && data.LAST && data.GR) {
                     $('input[id="studentID"]').val(myvar);
                     $('input[id="firstName"]').val(data.FIRST);
                     $('input[id="lastName"]').val(data.LAST);
                     $('input[id="grade"]').val(data.GR);

                  }

               });
               if(myvar.length>0){
                  const key2 = 'obligations/' + myvar;
                  database.ref(key2).once('value', (snapshot) => {
                     const data = snapshot.val();
                     if (!data) {
                        return;

                     }
                     else {
                        alert("This student has unpaid obligations.");
                        document.getElementById("oblig").style.display = "block";
                     }

                  });
               }

            }
         });

         $('#saveButton').click(() => {

            const reqs = checkReqs(); //If not false, [ticketNumG, lastNameG, firstNameG, payG, studentIDG]

            if (reqs) {

               database.ref('settings').once('value', (snapshot) => {

                  const data = snapshot.val();
                  const cap = parseInt(data.maxCap, 10);
                  if (cap){
                     const count = parseInt(data.currentNum, 10);
                     const dif = cap - count;
                     if (dif <= 0){
                        alert("Maximum capacity reached.");
                        return;
                     } else if(count <= 15 && count%5 === 0 || count <= 50 && count%10 === 0){
                        alert("You are " + (dif) + " students away from maximum capacity.");
                     }
                  }
               });
               
               const name = $('input[id="ticketNum"]').val();

               deleteRef(ogHost);

               database.ref('tickets/' + name).set({

                  sID: $('input[id="studentID"]').val(),
                  first: $('input[id="firstName"]').val(),
                  last: $('input[id="lastName"]').val(),
                  middle: $('input[id="midInit"]').val(),
                  grade: $('input[id="grade"]').val(),
                  payment: getPayment(false),
                  guest: null

               });

               if(!ogHost){
                  updateNum(1);
               }

               //Creates guest entry in database if checked, otherwise if unchecked deletes if guest exists in database
               if($('#guestForm').is(':hidden')===false){
                  delGuestRef(ogGuest);
                  deleteRef(ogGuest);

                  //reqs = [ticketNumG, lastNameG, firstNameG, payG, studentIDG]
                  const nameG = reqs[0];
                  database.ref('tickets/' + nameG).set({

                     first: reqs[2],
                     last: reqs[1],
                     payment: reqs[3],
                     host: name

                  });

                  if (reqs[4]){
                     database.ref('tickets/' + nameG).update({
                        sID:reqs[4]
                     });
                  }

                  /*const nameG = $('input[id="ticketNumG"]').val();
                  database.ref('tickets/' + nameG).set({

                     first: $('input[id="firstNameG"]').val(),
                     last: $('input[id="lastNameG"]').val(),
                     payment: getPayment(true),
                     host: name

                  });

                  if ($('input[id="studentIDG"]').val()){
                     database.ref('tickets/' + nameG).update({
                        sID:$('input[id="studentIDG"]').val()
                     });
                  }*/

                  //Add new child under og for guest
                  database.ref('tickets/' + name).update({

                     guest: nameG

                  });

                  if(!ogGuest){
                     updateNum(1);
                  }

               } else {
                  console.log("deleted");
                  try {
                     deleteRef(ogGuest);
                     console.log("guest deleted");
                  } catch (error) {
                     console.log("Cannot delete guest because guest does not exist.");
                  }
                  database.ref('tickets/' + name).update({

                     guest: null

                  });
               }

               $("input[type=text], textarea").val("");
               alert("You have completed Prom Signup!");
               window.location.replace("/search-student");
            }
         });

         $('#deleteButton').click(() => {
            const nums = [];
            if (ogHost){
               nums.push(ogHost);
            }
            if (ogGuest){
               nums.push(ogGuest);
            }
            nums.forEach(function(num){
               deleteRef(num);
            });

            $("input[type=text], textarea").val("");
            window.location.replace("/search-student");
         });

         $('#cancelButton').click(() => {
            window.location.replace("/search-student");
         });

         $('#addGuest').click(() => {
            toggle(false);
         });

         $('#delGuest').click(() => {
            toggle(true);
         });

         $('#searchGuest').click(() => {
            const guestID = $('input[id="studentIDG"]').val();
            if(guestID.length>0){
               const guestKey='students/' + guestID;
               database.ref(guestKey).once('value', (snapshot) => {
                  const data= snapshot.val();
                  if(!data){
                     alert("ID does not exist.");
                     return;
                  }
                  if(data.FIRST&&data.LAST){
                     $('input[id="firstNameG"]').val(data.FIRST);
                     $('input[id="lastNameG"]').val(data.LAST);
                  }
               });

               if(guestID.length>0){
                  const guestKey2='obligations/'+guestID;
                  database.ref(guestKey2).once('value', (snapshot) => {
                     const data= snapshot.val();
                     if(!data){
                        return;
                     } else{
                        alert("This guest has unpaid obligations.");
                        document.getElementById("obligG").style.display = "block";
                     }
                  });

               }
            }
         });

         $('input[type="radio"][name="pay"]').click(function () {
            $("input[id='checkNum']").prop("disabled", true);
            if ($(this).val() === "check") {
               $("input[id='checkNum']").prop("disabled", false);
            }
         });

         $('input[type="radio"][name="payG"]').click(function () {
            $("input[id='checkNumG']").prop("disabled", true);
            if ($(this).val() === "check") {
               $("input[id='checkNumG']").prop("disabled", false);
            }
         });

         function updateNum(num){ //Updates the current number of students in the database
            database.ref('settings').once('value', (snapshot) => {

               const data = snapshot.val();
               const count = parseInt(data.currentNum, 10);
               database.ref('settings').update({
               
                  currentNum: count+num

               });

            });
         }

         function deleteRef(num){ //Removes node of ticket number from database
            //const database = firebase.database();
            database.ref('tickets/' + num).remove();
            updateNum(-1);
         }

         function delGuestRef(num){ //Nullifies guest node of student's ticket number in database

         database.ref('tickets/' + ogHost).update({

            guest:null

         });

         }

         function toggle(vis){ //Toggles display of guest form and buttons
            if (vis === false){ //add button pressed
               document.getElementById("guestForm").style.display = "block";
               document.getElementById("addGuest").style.display = "none";
               document.getElementById("delGuest").style.display = "inline-block";
            } else { // delete button pressed
               document.getElementById("addGuest").style.display = "inline-block";
               document.getElementById("delGuest").style.display = "none";
               document.getElementById("guestForm").style.display = "none";
               clearGuest();
            }
         }

         function clearGuest(){ //Clears guest fields
            delGuestRef(ogGuest);
            deleteRef(ogGuest);
            $('input[id="ticketNumG"]').val('');
            $('input[id="studentIDG"]').val('');
            $('input[id="lastNameG"]').val('');
            $('input[id="firstNameG"]').val('');
            $('input[name="payG"]').prop('checked', false);
            $('input[id="checkNumG"]').val('');
            $('input[name="obligG"]').prop('checked', false);
         }

      });

      function getPayment(guest) { //returns check number if check, otherwise id
         if (!guest) {
            if ($('input[name=pay][value=check]').is(":checked")) {
               return $('input[id="checkNum"]').val();
            } else {
               return $('input[name="pay"]:checked').val();
            }
         } else {
            if ($('input[name=payG][value=check]').is(":checked")) {
               return $('input[id="checkNumG"]').val();
            } else {
               return $('input[name="payG"]:checked').val();
            }
         }

      }

      function checkReqs(){ //Returns false and sends alert if any required fields are incomplete
         var text = "";
         var textG = "";
         var guestFields = [];
         if (!$('input[id="ticketNum"]').val()){
            text+="\n  • Ticket Number";
         }
         if (!$('input[id="studentID"]').val()){
            text+="\n  • Student ID";
         }
         if (!$('input[id="lastName"]').val()){
            text+="\n  • Last Name";
         }
         if (!$('input[id="firstName"]').val()){
            text+="\n  • First Name";
         }
         if(!$('input[name="pay"]:checked').val()){
            text+="\n  • Payment Method";
         } else if ($('input[name="pay"]:checked').val() === "check" && !$('input[id="checkNum"]').val()){
            text+="\n  • Check Number";
         }
         if ($('[id=oblig]').is(":hidden") === false && $("input[name='oblig']").prop("checked") === false){
            text+="\n  • Student Obligations";
         }
         if($('#guestForm').is(':hidden')===false){
            if (!$('input[id="ticketNumG"]').val()){
               textG+="\n  • Ticket Number";
            } else if ($('input[id="ticketNum"]').val() === $('input[id="ticketNumG"]').val()){
               textG+="\n  • Matching ticket numbers"
            } else {
               guestFields.push($('input[id="ticketNumG"]').val());
            }
            if (!$('input[id="lastNameG"]').val()){
               textG+="\n  • Last Name";
            } else {
               guestFields.push($('input[id="lastNameG"]').val());
            }
            if (!$('input[id="firstNameG"]').val()){
               textG+="\n  • First Name";
            } else {
               guestFields.push($('input[id="firstNameG"]').val());
            }
            if(!$('input[name="payG"]:checked').val()){
               textG+="\n  • Payment Method";
            } else if ($('input[name="payG"]:checked').val() === "check" && !$('input[id="checkNumG"]').val()){
               textG+="\n  • Check Number";
            }  else {
               guestFields.push(getPayment(true));
            }
            if($('input[id="studentIDG"]').val()){
               guestFields.push($('input[id="studentIDG"]').val());
            }
            if ($('[id=obligG]').is(":hidden") === false && $("input[name='obligG']").prop("checked") === false){
               textG+="\n  • Guest Obligations";
            }
            if(textG.length > 0){
               textG = "\nGuest (Please complete the following fields or delete the guest):" + textG;
            }
         }
         text += textG;
         if (text.length > 0){
            alert("Please complete/review these sections before you can continue: " + text);
            return false;
         }
         return guestFields;
      }

   </script>

   <style>
      .guest {
         display: none;
      }

      .studentoblig {
         display: none;
      }
      
      .studentobligG {
         display:none;
     }

      #delGuest {
         display:none;
      }
   </style>
</head>

<body>
      <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
            <a class="navbar-brand" href="#">SRSS Prom Sign Up</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
              <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
              <ul class="navbar-nav">
                <li class="nav-item active">
                  <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" href="/display-student-data">Students</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" href="/search-student">Search</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" href="/settings">Settings</a>
                </li>
              </ul>
            </div>
          </nav>
   <div class="container p-4">
      <FORM NAME="joe">
         <INPUT TYPE="hidden" NAME="burns">
      </FORM>
      <form name="myform">
         <div class="row">
            <div class="col-2">
            </div>
            <div class="col-8">
               <div class="card">
                  <div class="card-header">
                     <div class="card-title">
                        <h5>Ticket Entry Information</h5>
                     </div>
                  </div>
                  <div class="card-body">
                     <div class="card-text">
                        <div class="row">
                           <div class="col-md-6">
                              <div class="form-group">
                                 <label>Ticket Number</label>
                                 <input class="form-control" type="text" id="ticketNum" size="5">
                              </div>
                              <div class="form-group">
                                 <label>Student ID</label>
                                 <input class="form-control" type="text" id="studentID" size="6">
                              </div>
                              <div class="form-group">
                                 <label>First Name</label>
                                 <input class="form-control" type="text" id="firstName" size="15">
                              </div>
                              <div class="form-group">
                                 <label>Last Name</label>
                                 <input class="form-control" type="text" id="lastName" size="15">
                              </div>
                              <div class="form-group">
                                 <label>Middle Initial</label>
                                 <input class="form-control" type="text" id="midInit" size="1">
                              </div>
                              <div class="form-group">
                                 <label>Grade</label>
                                 <input class="form-control" type="text" id="grade" size="2">
                              </div>
                              <div class="form-group">
                                 <strong>Payment Method</strong><br>
                                 <input type="radio" name="pay" id="payCash" value="cash"> Cash<br>
                                 <input type="radio" name="pay" id="payCheck" value="check"> Check
                                 <input type="text" id="checkNum" placeholder="Check Number"><br>
                                 <input type="radio" name="pay" id="payWaiver" value="waiver"> Financial Waiver
                              </div>
                              <div class="form-group">
                                 <div class="studentoblig" id="oblig">
                                    <strong>Student Obligations</strong><br>
                                    Are Student's obligations taken care of? <input type="checkbox" name="oblig"><br>
                                 </div>
                              </div>
                           </div>
                           <div class="col-md-6">
                              <div class="form-group mt-4">
                                 <label><strong>Guest: </strong></label>
                                    <button type="button" id = "addGuest">Add Guest</button>
                                    <button type="button" id = "delGuest">Delete Guest</button>
                              </div>
                              <div class="guest" id="guestForm">
                                 <strong>Enter Guest Details</strong>
                                 <div class="form-group mt-4">
                                    <label>Ticket Number:</label>
                                    <input class="form-control" type="text" id="ticketNumG" size="5">
                                 </div>
                                 <div class="form-group">
                                    <label>Student ID (optional):</label>
                                    <button type="button" id="searchGuest">Go</button>
                                    <input class="form-control" type="text" id="studentIDG" size="6">
                                 </div>
                                 <div class="form-group">
                                    <label>Last Name:</label>
                                    <input class="form-control" type="text" id="lastNameG" size="15">
                                 </div>
                                 <div class="form-group">
                                    <label>First Name:</label>
                                    <input class="form-control" type="text" id="firstNameG" size="15">
                                 </div>
                                 <div class="form-group">
                                    <label><strong>Payment Method</strong></label>
                                    <div>
                                       <input type="radio" name="payG" id="payCashG" value="cash"> Cash<br>
                                       <input type="radio" name="payG" id="payCheckG" value="check"> Check
                                       <input type="text" id="checkNumG" placeholder="Check Number"><br>
                                       <input type="radio" name="payG" id="payWaiverG" value="waiver"> Financial
                                       Waiver<br><br>
                                    </div>
                                 </div>
                                 <div class="form-group">
                                    <div class="studentobligG" id="obligG">
                                       <strong>Guest Obligations</strong><br>
                                       Are Guest's obligations taken care of? <input type="checkbox" name="obligG"><br>
                                    </div>
                                 </div>
                              </div>
                           </div>
                        </div>
                        <div class="row">
                           <div class="col-12">
                              <button class="btn btn-lg btn-danger" type="button" id="deleteButton">Delete</button>
                              <button class="btn btn-lg btn-default float-left" type="button" id="cancelButton">Cancel</button>
                              <button class="btn btn-lg btn-success" type="button" id="saveButton">Save</button>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="col-2">
            </div>
         </div>
      </form>
   </div>
</body>

</html>